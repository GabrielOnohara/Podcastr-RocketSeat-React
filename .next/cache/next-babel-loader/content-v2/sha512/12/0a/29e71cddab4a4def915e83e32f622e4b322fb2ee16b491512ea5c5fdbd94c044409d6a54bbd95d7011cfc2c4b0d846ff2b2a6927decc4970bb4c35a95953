{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\gabak\\\\OneDrive\\\\WorkPlace\\\\WebProjects\\\\podcastrnext\\\\src\\\\contexts\\\\PlayerContext.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useState } from \"react\";\nimport { useContext } from 'react';\nexport var PlayerContext = /*#__PURE__*/createContext({});\nexport function PlayerContextProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useState = useState([]),\n      episodeList = _useState[0],\n      setEpisodeList = _useState[1];\n\n  var _useState2 = useState(0),\n      currentEpisodeIndex = _useState2[0],\n      setCurrentEpisodeIndex = _useState2[1];\n\n  var _useState3 = useState(false),\n      isPlaying = _useState3[0],\n      setIsPlaying = _useState3[1];\n\n  var _useState4 = useState(false),\n      isLooping = _useState4[0],\n      setIsLooping = _useState4[1];\n\n  var _useState5 = useState(false),\n      isShuffling = _useState5[0],\n      setIsShuffling = _useState5[1];\n\n  function play(episode) {\n    setEpisodeList([episode]);\n    setCurrentEpisodeIndex(0);\n    setIsPlaying(true);\n  }\n\n  function playList(list, index) {\n    setEpisodeList(list);\n    setCurrentEpisodeIndex(index);\n    setIsPlaying(true);\n  }\n\n  function togglePlay() {\n    setIsPlaying(!isPlaying);\n  }\n\n  function toggleLoop() {\n    setIsLooping(!isLooping);\n  }\n\n  function toggleShuffle() {\n    setIsShuffling(!isShuffling);\n  }\n\n  function setPlayingState(state) {\n    setIsPlaying(state);\n  }\n\n  var hasPrevious = currentEpisodeIndex - 1 > 0;\n  var hasNext = isShuffling || currentEpisodeIndex + 1 < episodeList.length;\n\n  function playNext() {\n    var nextEpisodeIndex = currentEpisodeIndex + 1;\n\n    if (isShuffling) {\n      var nextRandomEpisodeIndex = Math.floor(Math.random() * episodeList.length);\n      setCurrentEpisodeIndex(nextEpisodeIndex);\n    } else if (hasNext) {\n      setCurrentEpisodeIndex(nextEpisodeIndex);\n    } else {\n      return;\n    }\n  }\n\n  function playPrevious() {\n    var nextEpisodeIndex = currentEpisodeIndex - 1;\n\n    if (hasPrevious) {\n      setCurrentEpisodeIndex(nextEpisodeIndex);\n    } else {\n      return;\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(PlayerContext.Provider, {\n    value: {\n      episodeList: episodeList,\n      currentEpisodeIndex: currentEpisodeIndex,\n      play: play,\n      playList: playList,\n      playNext: playNext,\n      isLooping: isLooping,\n      isShuffling: isShuffling,\n      toggleShuffle: toggleShuffle,\n      toggleLoop: toggleLoop,\n      playPrevious: playPrevious,\n      hasNext: hasNext,\n      hasPrevious: hasPrevious,\n      isPlaying: isPlaying,\n      togglePlay: togglePlay,\n      setPlayingState: setPlayingState\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n}\n\n_s(PlayerContextProvider, \"YSXWY8OfLfVxd5To+FHcHi+GAY0=\");\n\n_c = PlayerContextProvider;\nexport var usePlayer = function usePlayer() {\n  _s2();\n\n  return useContext(PlayerContext);\n};\n\n_s2(usePlayer, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"PlayerContextProvider\");","map":{"version":3,"sources":["C:/Users/gabak/OneDrive/WorkPlace/WebProjects/podcastrnext/src/contexts/PlayerContext.tsx"],"names":["createContext","useState","useContext","PlayerContext","PlayerContextProvider","children","episodeList","setEpisodeList","currentEpisodeIndex","setCurrentEpisodeIndex","isPlaying","setIsPlaying","isLooping","setIsLooping","isShuffling","setIsShuffling","play","episode","playList","list","index","togglePlay","toggleLoop","toggleShuffle","setPlayingState","state","hasPrevious","hasNext","length","playNext","nextEpisodeIndex","nextRandomEpisodeIndex","Math","floor","random","playPrevious","usePlayer"],"mappings":"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","sourcesContent":["import  { createContext, useState, ReactNode} from  \"react\"  \r\nimport { useContext } from 'react';\r\ntype Episode = {\r\n  title: string;\r\n  members: string;\r\n  thumbnail: string;\r\n  duration: number;\r\n  url: string;\r\n}\r\n\r\ntype PlayerContextData = {\r\n  episodeList: Episode[]\r\n  currentEpisodeIndex: number;\r\n  play: (episode: Episode) =>void;\r\n  isPlaying: boolean;\r\n  isLooping: boolean;\r\n  isShuffling: boolean;\r\n  togglePlay: () => void;\r\n  toggleLoop: ()=> void;\r\n  toggleShuffle: () => void;\r\n  setPlayingState: (state:boolean) =>void;\r\n  playList: (list: Episode[], index: number) => void;\r\n  playNext: () => void;\r\n  playPrevious: () => void;\r\n  hasNext: boolean;\r\n  hasPrevious: boolean;\r\n}\r\n\r\n\r\nexport const PlayerContext = createContext({} as PlayerContextData);\r\n\r\ntype PlayerContextProviderProps = {\r\n  children: ReactNode;\r\n}\r\n\r\nexport function PlayerContextProvider({children}: PlayerContextProviderProps){\r\n  const [episodeList, setEpisodeList] = useState([]);\r\n  const [currentEpisodeIndex, setCurrentEpisodeIndex] = useState(0);\r\n  const [isPlaying, setIsPlaying] = useState(false);\r\n  const [isLooping, setIsLooping] = useState(false);\r\n  const [isShuffling, setIsShuffling] = useState(false);\r\n\r\n\r\n\r\n  function play(episode :Episode){\r\n    setEpisodeList([episode]);\r\n    setCurrentEpisodeIndex(0);\r\n    setIsPlaying(true);\r\n  }\r\n\r\n  function playList(list:Episode[], index:number){\r\n    setEpisodeList(list);\r\n    setCurrentEpisodeIndex(index)\r\n    setIsPlaying(true);\r\n  }\r\n\r\n  function togglePlay(){\r\n    setIsPlaying(!isPlaying);\r\n  }\r\n\r\n  function toggleLoop(){\r\n    setIsLooping(!isLooping);\r\n  }\r\n\r\n  function toggleShuffle(){\r\n    setIsShuffling(!isShuffling);\r\n  }\r\n\r\n\r\n  function setPlayingState(state:boolean){\r\n    setIsPlaying(state);\r\n  }\r\n\r\n  const hasPrevious = currentEpisodeIndex - 1 > 0;\r\n  const hasNext = isShuffling || currentEpisodeIndex + 1 < episodeList.length;\r\n\r\n  function playNext(){\r\n    const nextEpisodeIndex = currentEpisodeIndex + 1;\r\n    if(isShuffling){\r\n      const nextRandomEpisodeIndex = Math.floor(Math.random() * episodeList.length);\r\n      setCurrentEpisodeIndex(nextEpisodeIndex);\r\n    }\r\n    else if(hasNext){\r\n      setCurrentEpisodeIndex(nextEpisodeIndex);\r\n    }else{\r\n      return;\r\n    }\r\n  }\r\n\r\n  function playPrevious(){\r\n    const nextEpisodeIndex = currentEpisodeIndex - 1;\r\n    if(hasPrevious){\r\n      setCurrentEpisodeIndex(nextEpisodeIndex);\r\n    }else{\r\n      return;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <PlayerContext.Provider value={{\r\n        episodeList, \r\n        currentEpisodeIndex,\r\n        play, \r\n        playList,\r\n        playNext,\r\n        isLooping,\r\n        isShuffling,\r\n        toggleShuffle,\r\n        toggleLoop,\r\n        playPrevious,\r\n        hasNext,\r\n        hasPrevious,\r\n        isPlaying,\r\n        togglePlay, \r\n        setPlayingState}}>\r\n      {children}\r\n    </PlayerContext.Provider>\r\n  );\r\n}\r\n\r\nexport const usePlayer = () => {\r\n  return useContext(PlayerContext);\r\n}"]},"metadata":{},"sourceType":"module"}