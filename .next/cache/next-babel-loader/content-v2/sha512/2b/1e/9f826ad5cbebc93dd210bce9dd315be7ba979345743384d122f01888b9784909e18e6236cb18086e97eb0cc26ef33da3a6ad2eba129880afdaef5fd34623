{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\gabak\\\\OneDrive\\\\WorkPlace\\\\WebProjects\\\\podcastrnext\\\\src\\\\pages\\\\index.tsx\";\n//spa\n//ssr \n//ssg usaremos este modo pois nossa pagina nao se altera muitas vezes num dia(1 video por dia)\nimport ptBr from 'date-fns/locale/pt-BR';\nimport { api } from \"../services/api\";\nimport { format, parseISO } from 'date-fns';\nimport { convertDurationToTimeString } from '../utils/convertDurationToTimeString';\nimport styles from 'home.module.scss';\nexport default function Home(props) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.homepage,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Index\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: JSON.stringify(props.episodes)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n}\nexport const getStaticProps = async () => {\n  const {\n    data\n  } = await api.get('episodes', {\n    params: {\n      _limit: 12,\n      _sort: 'published_at',\n      _order: 'desc'\n    }\n  });\n  const episodes = data.map(episode => {\n    return {\n      id: episode.id,\n      title: episode.title,\n      thumbnail: episode.thumbnail,\n      members: episode.members,\n      publishedAt: format(parseISO(episode.published_at), 'd MMM yy', {\n        locale: ptBr\n      }),\n      duration: Number(episode.file.duration),\n      durationAsString: convertDurationToTimeString(Number(episode.file.duration)),\n      description: episode.description,\n      url: episode.file.url\n    };\n  });\n  return {\n    props: {\n      episodes\n    },\n    revalidate: 60 * 60 * 8 //8 horas(a cada 8 horas a pagina vai ser renderizada novamente, \n    //ou seja, na renderiza toda vez que uma nova pessoa entrar na pag)\n\n  };\n};","map":{"version":3,"sources":["C:/Users/gabak/OneDrive/WorkPlace/WebProjects/podcastrnext/src/pages/index.tsx"],"names":["ptBr","api","format","parseISO","convertDurationToTimeString","styles","Home","props","homepage","JSON","stringify","episodes","getStaticProps","data","get","params","_limit","_sort","_order","map","episode","id","title","thumbnail","members","publishedAt","published_at","locale","duration","Number","file","durationAsString","description","url","revalidate"],"mappings":";;AAAA;AACA;AACA;AAEA,OAAOA,IAAP,MAAiB,uBAAjB;AAGA,SAASC,GAAT,QAAoB,iBAApB;AACA,SAAQC,MAAR,EAAgBC,QAAhB,QAA+B,UAA/B;AACA,SAASC,2BAAT,QAA4C,sCAA5C;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AAkBA,eAAe,SAASC,IAAT,CAAcC,KAAd,EAAgC;AAC7C,sBACE;AAAK,IAAA,SAAS,EAAIF,MAAM,CAACG,QAAzB;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,gBAAIC,IAAI,CAACC,SAAL,CAAeH,KAAK,CAACI,QAArB;AAAJ;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD;AAED,OAAO,MAAMC,cAA8B,GAAG,YAAY;AACxD,QAAM;AAACC,IAAAA;AAAD,MAAU,MAAMZ,GAAG,CAACa,GAAJ,CAAQ,UAAR,EAAmB;AACvCC,IAAAA,MAAM,EAAE;AACNC,MAAAA,MAAM,EAAE,EADF;AAENC,MAAAA,KAAK,EAAE,cAFD;AAGNC,MAAAA,MAAM,EAAE;AAHF;AAD+B,GAAnB,CAAtB;AAQA,QAAMP,QAAQ,GAAGE,IAAI,CAACM,GAAL,CAASC,OAAO,IAAI;AACnC,WAAO;AACLC,MAAAA,EAAE,EAAED,OAAO,CAACC,EADP;AAELC,MAAAA,KAAK,EAAEF,OAAO,CAACE,KAFV;AAGLC,MAAAA,SAAS,EAAEH,OAAO,CAACG,SAHd;AAILC,MAAAA,OAAO,EAAEJ,OAAO,CAACI,OAJZ;AAKLC,MAAAA,WAAW,EAAEvB,MAAM,CAACC,QAAQ,CAACiB,OAAO,CAACM,YAAT,CAAT,EAAiC,UAAjC,EAA6C;AAACC,QAAAA,MAAM,EAAE3B;AAAT,OAA7C,CALd;AAML4B,MAAAA,QAAQ,EAAEC,MAAM,CAACT,OAAO,CAACU,IAAR,CAAaF,QAAd,CANX;AAOLG,MAAAA,gBAAgB,EAAE3B,2BAA2B,CAACyB,MAAM,CAACT,OAAO,CAACU,IAAR,CAAaF,QAAd,CAAP,CAPxC;AAQLI,MAAAA,WAAW,EAAGZ,OAAO,CAACY,WARjB;AASLC,MAAAA,GAAG,EAAEb,OAAO,CAACU,IAAR,CAAaG;AATb,KAAP;AAYD,GAbgB,CAAjB;AAeA,SAAM;AACJ1B,IAAAA,KAAK,EAAE;AACLI,MAAAA;AADK,KADH;AAIJuB,IAAAA,UAAU,EAAE,KAAI,EAAJ,GAAS,CAJjB,CAImB;AACvB;;AALI,GAAN;AAOD,CA/BM","sourcesContent":["//spa\n//ssr \n//ssg usaremos este modo pois nossa pagina nao se altera muitas vezes num dia(1 video por dia)\n\nimport ptBr from 'date-fns/locale/pt-BR';\nimport { useEffect } from \"react\"\nimport {GetStaticProps} from \"next\"\nimport { api } from \"../services/api\"\nimport {format, parseISO} from 'date-fns';\nimport { convertDurationToTimeString } from '../utils/convertDurationToTimeString';\nimport styles from 'home.module.scss';\n\ntype Episode = {\n  id: string,\n  title: string,\n  thumbnail: string,\n  members: string,\n  publishedAt: string,\n  duration: number,\n  durationAsString: string,\n  description : string,\n  url: string,\n}\ntype HomeProps = {\n  episodes: Episode[];\n}\n\n\nexport default function Home(props: HomeProps) {\n  return (\n    <div className = {styles.homepage}>\n      <h1>Index</h1>\n      <p>{JSON.stringify(props.episodes)}</p>\n    </div>\n  )\n}\n\nexport const getStaticProps: GetStaticProps = async () => {\n  const {data}  = await api.get('episodes',{\n    params: {\n      _limit: 12,\n      _sort: 'published_at',\n      _order: 'desc'\n    }\n  });\n\n  const episodes = data.map(episode => {\n    return {\n      id: episode.id,\n      title: episode.title,\n      thumbnail: episode.thumbnail,\n      members: episode.members,\n      publishedAt: format(parseISO(episode.published_at), 'd MMM yy', {locale: ptBr} ),\n      duration: Number(episode.file.duration),\n      durationAsString: convertDurationToTimeString(Number(episode.file.duration)),\n      description : episode.description,\n      url: episode.file.url,\n    }\n    \n  });\n\n  return{\n    props: {\n      episodes,\n    },\n    revalidate: 60 *60  *8 //8 horas(a cada 8 horas a pagina vai ser renderizada novamente, \n    //ou seja, na renderiza toda vez que uma nova pessoa entrar na pag)\n  }\n}"]},"metadata":{},"sourceType":"module"}