{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\gabak\\\\OneDrive\\\\WorkPlace\\\\WebProjects\\\\podcastrnext\\\\src\\\\pages\\\\episodes\\\\[slug].tsx\";\nimport { format, parseISO } from 'date-fns';\nimport { api } from '../../services/api';\nimport ptBr from 'date-fns/locale/pt-BR';\nimport { convertDurationToTimeString } from '../../utils/convertDurationToTimeString';\nimport styles from './episode.module.scss';\nimport Image from \"next/image\";\nimport Link from 'next/link';\nexport default function Episode({\n  episode\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.episode,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.thumbnailContainer,\n      children: [/*#__PURE__*/_jsxDEV(Link, {\n        href: \"/\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: \"/arrow-left.svg\",\n            alt: \"Voltar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Image, {\n        width: 700,\n        height: 160,\n        src: episode.thumbnail,\n        objectFit: \"cover\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"/play.svg\",\n          alt: \"Tocar Epis\\xF3dio\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(\"header\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: episode.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 8\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: episode.members\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: episode.publishedAt\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: episode.duration\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.description,\n      dangerouslySetInnerHTML: {\n        __html: episode.description\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 6\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 4\n  }, this);\n}\nexport const getStaticPaths = async () => {\n  //quando usamos ssg com criacao dinamica de pags precisamos usar este metodo\n  const {\n    data\n  } = await api.get('episodes', {\n    params: {\n      _limit: 12,\n      _sort: 'published_at',\n      _order: 'desc'\n    }\n  });\n  const paths = data.map(episode => {\n    return {\n      params: {\n        slug: episode.id\n      }\n    };\n  });\n  return {\n    paths,\n    fallback: 'blocking'\n  };\n};\nexport const getStaticProps = async ctx => {\n  const {\n    slug\n  } = ctx.params;\n  const {\n    data\n  } = await api.get(`/episodes/${slug}`);\n  const episode = {\n    id: data.id,\n    title: data.title,\n    thumbnail: data.thumbnail,\n    members: data.members,\n    publishedAt: format(parseISO(data.published_at), 'd MMM yy', {\n      locale: ptBr\n    }),\n    duration: Number(data.file.duration),\n    durationAsString: convertDurationToTimeString(Number(data.file.duration)),\n    description: data.description,\n    url: data.file.url\n  };\n  return {\n    props: {\n      episode\n    },\n    revalidate: 60 * 60 * 24\n  };\n};","map":{"version":3,"sources":["C:/Users/gabak/OneDrive/WorkPlace/WebProjects/podcastrnext/src/pages/episodes/[slug].tsx"],"names":["format","parseISO","api","ptBr","convertDurationToTimeString","styles","Image","Link","Episode","episode","thumbnailContainer","thumbnail","title","members","publishedAt","duration","description","__html","getStaticPaths","data","get","params","_limit","_sort","_order","paths","map","slug","id","fallback","getStaticProps","ctx","published_at","locale","Number","file","durationAsString","url","props","revalidate"],"mappings":"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","sourcesContent":["import { format, parseISO } from 'date-fns';\r\nimport { GetStaticPaths, GetStaticProps } from 'next';\r\nimport { useRouter } from 'next/router'\r\nimport { api } from '../../services/api';\r\nimport ptBr from 'date-fns/locale/pt-BR';\r\nimport { convertDurationToTimeString } from '../../utils/convertDurationToTimeString';\r\nimport styles from './episode.module.scss'\r\nimport  Image  from \"next/image\";\r\nimport Link from 'next/link'; \r\ntype Episode = {\r\n  id: string,\r\n  title: string,\r\n  thumbnail: string,\r\n  members: string,\r\n  publishedAt: string,\r\n  duration: number,\r\n  durationAsString: string,\r\n  url: string,\r\n  description: string,\r\n}\r\ntype EpisodeProps = {\r\n  episode:Episode;\r\n}\r\nexport default function Episode({episode} :EpisodeProps) {\r\n\r\n  return (\r\n   <div className={styles.episode}>\r\n     <div className={styles.thumbnailContainer}>\r\n      <Link  href='/'>\r\n        <button type=\"button\">\r\n          <img src=\"/arrow-left.svg\" alt=\"Voltar\"/> \r\n        </button>\r\n      </Link>\r\n      <Image \r\n        width = {700}\r\n        height = {160}\r\n        src = {episode.thumbnail}\r\n        objectFit = 'cover'\r\n      />\r\n      <button>\r\n        <img src=\"/play.svg\" alt=\"Tocar EpisÃ³dio\"/>\r\n      </button>\r\n     </div>\r\n\r\n     <header>\r\n       <h1>{episode.title}</h1>\r\n        <span>{episode.members}</span>\r\n        <span>{episode.publishedAt}</span>\r\n        <span>{episode.duration}</span>\r\n     </header>\r\n\r\n     <div className = {styles.description} dangerouslySetInnerHTML = {{__html: episode.description}}>\r\n     </div>\r\n   </div>\r\n  )\r\n}\r\n\r\nexport const getStaticPaths : GetStaticPaths = async() => {//quando usamos ssg com criacao dinamica de pags precisamos usar este metodo\r\n\r\n  const {data}  = await api.get('episodes',{\r\n    params: {\r\n      _limit: 12,\r\n      _sort: 'published_at',\r\n      _order: 'desc'\r\n    }\r\n  });\r\n\r\n  const paths = data.map(episode => {\r\n    return {\r\n      params: {\r\n        slug:episode.id,\r\n      }\r\n    }\r\n  });\r\n\r\n  return {\r\n    paths,\r\n    fallback: 'blocking'\r\n  }\r\n}\r\n\r\nexport const getStaticProps: GetStaticProps = async (ctx) => {\r\n  const {slug} = ctx.params;\r\n  const {data}  = await api.get(`/episodes/${slug}`);\r\n\r\n  const episode = {\r\n    id: data.id,\r\n      title: data.title,\r\n      thumbnail: data.thumbnail,\r\n      members: data.members,\r\n      publishedAt: format(parseISO(data.published_at), 'd MMM yy', {locale: ptBr} ),\r\n      duration: Number(data.file.duration),\r\n      durationAsString: convertDurationToTimeString(Number(data.file.duration)),\r\n      description : data.description,\r\n      url: data.file.url,\r\n  }\r\n\r\nreturn{\r\n  props: {\r\n    episode\r\n  },\r\n  revalidate: 60 *60  *24 \r\n}\r\n}\r\n"]},"metadata":{},"sourceType":"module"}