{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\gabak\\\\OneDrive\\\\WorkPlace\\\\WebProjects\\\\podcastrnext\\\\src\\\\contexts\\\\PlayerContext.tsx\";\nimport { createContext, useState } from \"react\";\nimport { useContext } from 'react';\nexport const PlayerContext = /*#__PURE__*/createContext({});\nexport function PlayerContextProvider({\n  children\n}) {\n  const {\n    0: episodeList,\n    1: setEpisodeList\n  } = useState([]);\n  const {\n    0: currentEpisodeIndex,\n    1: setCurrentEpisodeIndex\n  } = useState(0);\n  const {\n    0: isPlaying,\n    1: setIsPlaying\n  } = useState(false);\n  const {\n    0: isLooping,\n    1: setIsLooping\n  } = useState(false);\n\n  function play(episode) {\n    setEpisodeList([episode]);\n    setCurrentEpisodeIndex(0);\n    setIsPlaying(true);\n  }\n\n  function playList(list, index) {\n    setEpisodeList(list);\n    setCurrentEpisodeIndex(index);\n    setIsPlaying(true);\n  }\n\n  function togglePlay() {\n    setIsPlaying(!isPlaying);\n  }\n\n  function toggleLoop() {\n    setIsLooping(!isLooping);\n  }\n\n  function setPlayingState(state) {\n    setIsPlaying(state);\n  }\n\n  const hasPrevious = currentEpisodeIndex - 1 > 0;\n  const hasNext = currentEpisodeIndex + 1 < episodeList.length;\n\n  function playNext() {\n    const nextEpisodeIndex = currentEpisodeIndex + 1;\n\n    if (hasNext) {\n      setCurrentEpisodeIndex(nextEpisodeIndex);\n    } else {\n      return;\n    }\n  }\n\n  function playPrevious() {\n    const nextEpisodeIndex = currentEpisodeIndex - 1;\n\n    if (hasPrevious) {\n      setCurrentEpisodeIndex(nextEpisodeIndex);\n    } else {\n      return;\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(PlayerContext.Provider, {\n    value: {\n      episodeList,\n      currentEpisodeIndex,\n      play,\n      playList,\n      playNext,\n      isLooping,\n      toggleLoop,\n      playPrevious,\n      hasNext,\n      hasPrevious,\n      isPlaying,\n      togglePlay,\n      setPlayingState\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n}\nexport const usePlayer = () => {\n  return useContext(PlayerContext);\n};","map":{"version":3,"sources":["C:/Users/gabak/OneDrive/WorkPlace/WebProjects/podcastrnext/src/contexts/PlayerContext.tsx"],"names":["createContext","useState","useContext","PlayerContext","PlayerContextProvider","children","episodeList","setEpisodeList","currentEpisodeIndex","setCurrentEpisodeIndex","isPlaying","setIsPlaying","isLooping","setIsLooping","play","episode","playList","list","index","togglePlay","toggleLoop","setPlayingState","state","hasPrevious","hasNext","length","playNext","nextEpisodeIndex","playPrevious","usePlayer"],"mappings":";;AAAA,SAAUA,aAAV,EAAyBC,QAAzB,QAAoD,OAApD;AACA,SAASC,UAAT,QAA2B,OAA3B;AA0BA,OAAO,MAAMC,aAAa,gBAAGH,aAAa,CAAC,EAAD,CAAnC;AAMP,OAAO,SAASI,qBAAT,CAA+B;AAACC,EAAAA;AAAD,CAA/B,EAAsE;AAC3E,QAAM;AAAA,OAACC,WAAD;AAAA,OAAcC;AAAd,MAAgCN,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM;AAAA,OAACO,mBAAD;AAAA,OAAsBC;AAAtB,MAAgDR,QAAQ,CAAC,CAAD,CAA9D;AACA,QAAM;AAAA,OAACS,SAAD;AAAA,OAAYC;AAAZ,MAA4BV,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM;AAAA,OAACW,SAAD;AAAA,OAAYC;AAAZ,MAA4BZ,QAAQ,CAAC,KAAD,CAA1C;;AAIA,WAASa,IAAT,CAAcC,OAAd,EAA+B;AAC7BR,IAAAA,cAAc,CAAC,CAACQ,OAAD,CAAD,CAAd;AACAN,IAAAA,sBAAsB,CAAC,CAAD,CAAtB;AACAE,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD;;AAED,WAASK,QAAT,CAAkBC,IAAlB,EAAkCC,KAAlC,EAA+C;AAC7CX,IAAAA,cAAc,CAACU,IAAD,CAAd;AACAR,IAAAA,sBAAsB,CAACS,KAAD,CAAtB;AACAP,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD;;AAED,WAASQ,UAAT,GAAqB;AACnBR,IAAAA,YAAY,CAAC,CAACD,SAAF,CAAZ;AACD;;AAED,WAASU,UAAT,GAAqB;AACnBP,IAAAA,YAAY,CAAC,CAACD,SAAF,CAAZ;AACD;;AAED,WAASS,eAAT,CAAyBC,KAAzB,EAAuC;AACrCX,IAAAA,YAAY,CAACW,KAAD,CAAZ;AACD;;AAED,QAAMC,WAAW,GAAGf,mBAAmB,GAAG,CAAtB,GAA0B,CAA9C;AACA,QAAMgB,OAAO,GAAGhB,mBAAmB,GAAG,CAAtB,GAA0BF,WAAW,CAACmB,MAAtD;;AAEA,WAASC,QAAT,GAAmB;AACjB,UAAMC,gBAAgB,GAAGnB,mBAAmB,GAAG,CAA/C;;AACA,QAAGgB,OAAH,EAAW;AACTf,MAAAA,sBAAsB,CAACkB,gBAAD,CAAtB;AACD,KAFD,MAEK;AACH;AACD;AACF;;AAED,WAASC,YAAT,GAAuB;AACrB,UAAMD,gBAAgB,GAAGnB,mBAAmB,GAAG,CAA/C;;AACA,QAAGe,WAAH,EAAe;AACbd,MAAAA,sBAAsB,CAACkB,gBAAD,CAAtB;AACD,KAFD,MAEK;AACH;AACD;AACF;;AAED,sBACE,QAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAE;AAC3BrB,MAAAA,WAD2B;AAE3BE,MAAAA,mBAF2B;AAG3BM,MAAAA,IAH2B;AAI3BE,MAAAA,QAJ2B;AAK3BU,MAAAA,QAL2B;AAM3Bd,MAAAA,SAN2B;AAO3BQ,MAAAA,UAP2B;AAQ3BQ,MAAAA,YAR2B;AAS3BJ,MAAAA,OAT2B;AAU3BD,MAAAA,WAV2B;AAW3Bb,MAAAA,SAX2B;AAY3BS,MAAAA,UAZ2B;AAa3BE,MAAAA;AAb2B,KAA/B;AAAA,cAcGhB;AAdH;AAAA;AAAA;AAAA;AAAA,UADF;AAkBD;AAED,OAAO,MAAMwB,SAAS,GAAG,MAAM;AAC7B,SAAO3B,UAAU,CAACC,aAAD,CAAjB;AACD,CAFM","sourcesContent":["import  { createContext, useState, ReactNode} from  \"react\"  \r\nimport { useContext } from 'react';\r\ntype Episode = {\r\n  title: string;\r\n  members: string;\r\n  thumbnail: string;\r\n  duration: number;\r\n  url: string;\r\n}\r\n\r\ntype PlayerContextData = {\r\n  episodeList: Episode[]\r\n  currentEpisodeIndex: number;\r\n  play: (episode: Episode) =>void;\r\n  isPlaying: boolean;\r\n  isLooping: boolean;\r\n  togglePlay: () => void;\r\n  setPlayingState: (state:boolean) =>void;\r\n  playList: (list: Episode[], index: number) => void;\r\n  playNext: () => void;\r\n  playPrevious: () => void;\r\n  hasNext: boolean;\r\n  hasPrevious: boolean;\r\n  toogleLoop: ()=> void;\r\n}\r\n\r\n\r\nexport const PlayerContext = createContext({} as PlayerContextData);\r\n\r\ntype PlayerContextProviderProps = {\r\n  children: ReactNode;\r\n}\r\n\r\nexport function PlayerContextProvider({children}: PlayerContextProviderProps){\r\n  const [episodeList, setEpisodeList] = useState([]);\r\n  const [currentEpisodeIndex, setCurrentEpisodeIndex] = useState(0);\r\n  const [isPlaying, setIsPlaying] = useState(false);\r\n  const [isLooping, setIsLooping] = useState(false);\r\n\r\n\r\n\r\n  function play(episode :Episode){\r\n    setEpisodeList([episode]);\r\n    setCurrentEpisodeIndex(0);\r\n    setIsPlaying(true);\r\n  }\r\n\r\n  function playList(list:Episode[], index:number){\r\n    setEpisodeList(list);\r\n    setCurrentEpisodeIndex(index)\r\n    setIsPlaying(true);\r\n  }\r\n\r\n  function togglePlay(){\r\n    setIsPlaying(!isPlaying);\r\n  }\r\n\r\n  function toggleLoop(){\r\n    setIsLooping(!isLooping);\r\n  }\r\n\r\n  function setPlayingState(state:boolean){\r\n    setIsPlaying(state);\r\n  }\r\n\r\n  const hasPrevious = currentEpisodeIndex - 1 > 0;\r\n  const hasNext = currentEpisodeIndex + 1 < episodeList.length;\r\n\r\n  function playNext(){\r\n    const nextEpisodeIndex = currentEpisodeIndex + 1;\r\n    if(hasNext){\r\n      setCurrentEpisodeIndex(nextEpisodeIndex);\r\n    }else{\r\n      return;\r\n    }\r\n  }\r\n\r\n  function playPrevious(){\r\n    const nextEpisodeIndex = currentEpisodeIndex - 1;\r\n    if(hasPrevious){\r\n      setCurrentEpisodeIndex(nextEpisodeIndex);\r\n    }else{\r\n      return;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <PlayerContext.Provider value={{\r\n        episodeList, \r\n        currentEpisodeIndex,\r\n        play, \r\n        playList,\r\n        playNext,\r\n        isLooping,\r\n        toggleLoop,\r\n        playPrevious,\r\n        hasNext,\r\n        hasPrevious,\r\n        isPlaying,\r\n        togglePlay, \r\n        setPlayingState}}>\r\n      {children}\r\n    </PlayerContext.Provider>\r\n  );\r\n}\r\n\r\nexport const usePlayer = () => {\r\n  return useContext(PlayerContext);\r\n}"]},"metadata":{},"sourceType":"module"}