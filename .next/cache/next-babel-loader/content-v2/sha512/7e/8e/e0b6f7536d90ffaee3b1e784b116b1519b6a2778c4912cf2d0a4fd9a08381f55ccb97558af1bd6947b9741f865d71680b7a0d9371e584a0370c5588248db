{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\gabak\\\\OneDrive\\\\WorkPlace\\\\WebProjects\\\\podcastrnext\\\\src\\\\contexts\\\\PlayerContext.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useState } from \"react\";\nimport { useContext } from 'react';\nexport var PlayerContext = /*#__PURE__*/createContext({});\nexport function PlayerContextProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useState = useState([]),\n      episodeList = _useState[0],\n      setEpisodeList = _useState[1];\n\n  var _useState2 = useState(0),\n      currentEpisodeIndex = _useState2[0],\n      setCurrentEpisodeIndex = _useState2[1];\n\n  var _useState3 = useState(false),\n      isPlaying = _useState3[0],\n      setIsPlaying = _useState3[1];\n\n  var _useState4 = useState(false),\n      isLoo = _useState4[0],\n      setIsLooping = _useState4[1];\n\n  function play(episode) {\n    setEpisodeList([episode]);\n    setCurrentEpisodeIndex(0);\n    setIsPlaying(true);\n  }\n\n  function playList(list, index) {\n    setEpisodeList(list);\n    setCurrentEpisodeIndex(index);\n    setIsPlaying(true);\n  }\n\n  function togglePlay() {\n    setIsPlaying(!isPlaying);\n  }\n\n  function setPlayingState(state) {\n    setIsPlaying(state);\n  }\n\n  var hasPrevious = currentEpisodeIndex - 1 > 0;\n  var hasNext = currentEpisodeIndex + 1 < episodeList.length;\n\n  function playNext() {\n    var nextEpisodeIndex = currentEpisodeIndex + 1;\n\n    if (hasNext) {\n      setCurrentEpisodeIndex(nextEpisodeIndex);\n    } else {\n      return;\n    }\n  }\n\n  function playPrevious() {\n    var nextEpisodeIndex = currentEpisodeIndex - 1;\n\n    if (hasPrevious) {\n      setCurrentEpisodeIndex(nextEpisodeIndex);\n    } else {\n      return;\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(PlayerContext.Provider, {\n    value: {\n      episodeList: episodeList,\n      currentEpisodeIndex: currentEpisodeIndex,\n      play: play,\n      playList: playList,\n      playNext: playNext,\n      playPrevious: playPrevious,\n      hasNext: hasNext,\n      hasPrevious: hasPrevious,\n      isPlaying: isPlaying,\n      togglePlay: togglePlay,\n      setPlayingState: setPlayingState\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n}\n\n_s(PlayerContextProvider, \"nCbXXUeRMoLQ5n30f0x+s45Cpu4=\");\n\n_c = PlayerContextProvider;\nexport var usePlayer = function usePlayer() {\n  _s2();\n\n  return useContext(PlayerContext);\n};\n\n_s2(usePlayer, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"PlayerContextProvider\");","map":{"version":3,"sources":["C:/Users/gabak/OneDrive/WorkPlace/WebProjects/podcastrnext/src/contexts/PlayerContext.tsx"],"names":["createContext","useState","useContext","PlayerContext","PlayerContextProvider","children","episodeList","setEpisodeList","currentEpisodeIndex","setCurrentEpisodeIndex","isPlaying","setIsPlaying","isLoo","setIsLooping","play","episode","playList","list","index","togglePlay","setPlayingState","state","hasPrevious","hasNext","length","playNext","nextEpisodeIndex","playPrevious","usePlayer"],"mappings":";;;;;;AAAA,SAAUA,aAAV,EAAyBC,QAAzB,QAAoD,OAApD;AACA,SAASC,UAAT,QAA2B,OAA3B;AAwBA,OAAO,IAAMC,aAAa,gBAAGH,aAAa,CAAC,EAAD,CAAnC;AAMP,OAAO,SAASI,qBAAT,OAAsE;AAAA;;AAAA,MAAtCC,QAAsC,QAAtCA,QAAsC;;AAAA,kBACrCJ,QAAQ,CAAC,EAAD,CAD6B;AAAA,MACpEK,WADoE;AAAA,MACvDC,cADuD;;AAAA,mBAErBN,QAAQ,CAAC,CAAD,CAFa;AAAA,MAEpEO,mBAFoE;AAAA,MAE/CC,sBAF+C;;AAAA,mBAGzCR,QAAQ,CAAC,KAAD,CAHiC;AAAA,MAGpES,SAHoE;AAAA,MAGzDC,YAHyD;;AAAA,mBAI7CV,QAAQ,CAAC,KAAD,CAJqC;AAAA,MAIpEW,KAJoE;AAAA,MAI7DC,YAJ6D;;AAQ3E,WAASC,IAAT,CAAcC,OAAd,EAA+B;AAC7BR,IAAAA,cAAc,CAAC,CAACQ,OAAD,CAAD,CAAd;AACAN,IAAAA,sBAAsB,CAAC,CAAD,CAAtB;AACAE,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD;;AAED,WAASK,QAAT,CAAkBC,IAAlB,EAAkCC,KAAlC,EAA+C;AAC7CX,IAAAA,cAAc,CAACU,IAAD,CAAd;AACAR,IAAAA,sBAAsB,CAACS,KAAD,CAAtB;AACAP,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD;;AAED,WAASQ,UAAT,GAAqB;AACnBR,IAAAA,YAAY,CAAC,CAACD,SAAF,CAAZ;AACD;;AAED,WAASU,eAAT,CAAyBC,KAAzB,EAAuC;AACrCV,IAAAA,YAAY,CAACU,KAAD,CAAZ;AACD;;AAED,MAAMC,WAAW,GAAGd,mBAAmB,GAAG,CAAtB,GAA0B,CAA9C;AACA,MAAMe,OAAO,GAAGf,mBAAmB,GAAG,CAAtB,GAA0BF,WAAW,CAACkB,MAAtD;;AAEA,WAASC,QAAT,GAAmB;AACjB,QAAMC,gBAAgB,GAAGlB,mBAAmB,GAAG,CAA/C;;AACA,QAAGe,OAAH,EAAW;AACTd,MAAAA,sBAAsB,CAACiB,gBAAD,CAAtB;AACD,KAFD,MAEK;AACH;AACD;AACF;;AAED,WAASC,YAAT,GAAuB;AACrB,QAAMD,gBAAgB,GAAGlB,mBAAmB,GAAG,CAA/C;;AACA,QAAGc,WAAH,EAAe;AACbb,MAAAA,sBAAsB,CAACiB,gBAAD,CAAtB;AACD,KAFD,MAEK;AACH;AACD;AACF;;AAED,sBACE,QAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAE;AAC3BpB,MAAAA,WAAW,EAAXA,WAD2B;AAE3BE,MAAAA,mBAAmB,EAAnBA,mBAF2B;AAG3BM,MAAAA,IAAI,EAAJA,IAH2B;AAI3BE,MAAAA,QAAQ,EAARA,QAJ2B;AAK3BS,MAAAA,QAAQ,EAARA,QAL2B;AAM3BE,MAAAA,YAAY,EAAZA,YAN2B;AAO3BJ,MAAAA,OAAO,EAAPA,OAP2B;AAQ3BD,MAAAA,WAAW,EAAXA,WAR2B;AAS3BZ,MAAAA,SAAS,EAATA,SAT2B;AAU3BS,MAAAA,UAAU,EAAVA,UAV2B;AAW3BC,MAAAA,eAAe,EAAfA;AAX2B,KAA/B;AAAA,cAYGf;AAZH;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD;;GAjEeD,qB;;KAAAA,qB;AAmEhB,OAAO,IAAMwB,SAAS,GAAG,SAAZA,SAAY,GAAM;AAAA;;AAC7B,SAAO1B,UAAU,CAACC,aAAD,CAAjB;AACD,CAFM;;IAAMyB,S","sourcesContent":["import  { createContext, useState, ReactNode} from  \"react\"  \r\nimport { useContext } from 'react';\r\ntype Episode = {\r\n  title: string;\r\n  members: string;\r\n  thumbnail: string;\r\n  duration: number;\r\n  url: string;\r\n}\r\n\r\ntype PlayerContextData = {\r\n  episodeList: Episode[]\r\n  currentEpisodeIndex: number;\r\n  play: (episode: Episode) =>void;\r\n  isPlaying: boolean;\r\n  togglePlay: () => void;\r\n  setPlayingState: (state:boolean) =>void;\r\n  playList: (list: Episode[], index: number) => void;\r\n  playNext: () => void;\r\n  playPrevious: () => void;\r\n  hasNext: boolean;\r\n  hasPrevious: boolean;\r\n}\r\n\r\n\r\nexport const PlayerContext = createContext({} as PlayerContextData);\r\n\r\ntype PlayerContextProviderProps = {\r\n  children: ReactNode;\r\n}\r\n\r\nexport function PlayerContextProvider({children}: PlayerContextProviderProps){\r\n  const [episodeList, setEpisodeList] = useState([]);\r\n  const [currentEpisodeIndex, setCurrentEpisodeIndex] = useState(0);\r\n  const [isPlaying, setIsPlaying] = useState(false);\r\n  const [isLoo, setIsLooping] = useState(false);\r\n\r\n\r\n\r\n  function play(episode :Episode){\r\n    setEpisodeList([episode]);\r\n    setCurrentEpisodeIndex(0);\r\n    setIsPlaying(true);\r\n  }\r\n\r\n  function playList(list:Episode[], index:number){\r\n    setEpisodeList(list);\r\n    setCurrentEpisodeIndex(index)\r\n    setIsPlaying(true);\r\n  }\r\n\r\n  function togglePlay(){\r\n    setIsPlaying(!isPlaying);\r\n  }\r\n\r\n  function setPlayingState(state:boolean){\r\n    setIsPlaying(state);\r\n  }\r\n\r\n  const hasPrevious = currentEpisodeIndex - 1 > 0;\r\n  const hasNext = currentEpisodeIndex + 1 < episodeList.length;\r\n\r\n  function playNext(){\r\n    const nextEpisodeIndex = currentEpisodeIndex + 1;\r\n    if(hasNext){\r\n      setCurrentEpisodeIndex(nextEpisodeIndex);\r\n    }else{\r\n      return;\r\n    }\r\n  }\r\n\r\n  function playPrevious(){\r\n    const nextEpisodeIndex = currentEpisodeIndex - 1;\r\n    if(hasPrevious){\r\n      setCurrentEpisodeIndex(nextEpisodeIndex);\r\n    }else{\r\n      return;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <PlayerContext.Provider value={{\r\n        episodeList, \r\n        currentEpisodeIndex,\r\n        play, \r\n        playList,\r\n        playNext,\r\n        playPrevious,\r\n        hasNext,\r\n        hasPrevious,\r\n        isPlaying,\r\n        togglePlay, \r\n        setPlayingState}}>\r\n      {children}\r\n    </PlayerContext.Provider>\r\n  );\r\n}\r\n\r\nexport const usePlayer = () => {\r\n  return useContext(PlayerContext);\r\n}"]},"metadata":{},"sourceType":"module"}